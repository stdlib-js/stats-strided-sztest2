{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/sztest2.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolveStr = require( '@stdlib/stats-base-ztest-alternative-resolve-str' );\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar quantile = require( '@stdlib/stats-base-dists-normal-quantile' ).factory;\nvar cdf = require( '@stdlib/stats-base-dists-normal-cdf' ).factory;\nvar smean = require( '@stdlib/stats-strided-smean' ).ndarray;\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar Float32Array = require( '@stdlib/array-float32' );\nvar PINF = require( '@stdlib/constants-float32-pinf' );\nvar NINF = require( '@stdlib/constants-float32-ninf' );\nvar f32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// VARIABLES //\n\nvar normalCDF = cdf( 0.0, 1.0 );\nvar normalQuantile = quantile( 0.0, 1.0 );\n\n// Initialize a workspace for storing confidence intervals:\nvar WORKSPACE = new Float32Array( 2 );\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Z-test for two single-precision floating-point strided arrays using alternative indexing semantics.\n*\n* @param {PositiveInteger} NX - number of indexed elements in `x`\n* @param {PositiveInteger} NY - number of indexed elements in `y`\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} diff - difference in means under the null hypothesis\n* @param {PositiveNumber} sigmax - known standard deviation of `x`\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {PositiveNumber} sigmay - known standard deviation of `y`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Results = require( '@stdlib/stats-base-ztest-two-sample-results-float32' );\n*\n* var x = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n* var y = new Float32Array( [ 3.0, 3.0, 5.0, 7.0, 7.0 ] );\n*\n* var results = new Results();\n* var out = sztest2( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 0, 2.0, y, 1, 0, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction sztest2( NX, NY, alternative, alpha, diff, sigmax, x, strideX, offsetX, sigmay, y, strideY, offsetY, out ) { // eslint-disable-line max-len, max-params\n\tvar pValue;\n\tvar stderr;\n\tvar xmean;\n\tvar ymean;\n\tvar xvar;\n\tvar yvar;\n\tvar stat;\n\tvar alt;\n\tvar q;\n\n\talt = resolveStr( alternative );\n\tif (\n\t\tNX <= 0 ||\n\t\tNY <= 0 ||\n\t\tisnanf( alpha ) ||\n\t\tisnanf( diff ) ||\n\t\tisnanf( sigmax ) ||\n\t\tisnanf( sigmay ) ||\n\t\tsigmax <= 0.0 ||\n\t\tsigmay <= 0.0 ||\n\t\talpha < 0.0 ||\n\t\talpha > 1.0\n\t) {\n\t\tWORKSPACE[ 0 ] = NaN;\n\t\tWORKSPACE[ 1 ] = NaN;\n\t\tout.rejected = false;\n\t\tout.alternative = alt;\n\t\tout.alpha = NaN;\n\t\tout.pValue = NaN;\n\t\tout.statistic = NaN;\n\t\tout.ci = WORKSPACE;\n\t\tout.nullValue = NaN;\n\t\tout.xmean = NaN;\n\t\tout.ymean = NaN;\n\t\treturn out;\n\t}\n\n\t// \"Cast\" input values to single-precision:\n\talpha = f32( alpha );\n\tdiff = f32( diff );\n\tsigmax = f32( sigmax );\n\tsigmay = f32( sigmay );\n\n\t// Compute the standard error of the mean:\n\txvar = sigmax * sigmax;\n\tyvar = sigmay * sigmay;\n\tstderr = sqrt( ( xvar / NX ) + ( yvar / NY ) );\n\n\t// Compute the arithmetic means of the input arrays:\n\txmean = smean( NX, x, strideX, offsetX );\n\tymean = smean( NY, y, strideY, offsetY );\n\n\t// Compute the test statistic (i.e., the z-score, which is the standardized difference between the sample means of x and y, adjusted by the hypothesized difference, in units of the standard error):\n\tstat = ( xmean - ymean - diff ) / stderr;\n\n\t// Compute the p-value and confidence interval...\n\tif ( alt === 'less' ) {\n\t\tpValue = normalCDF( stat );\n\t\tq = normalQuantile( 1.0 - alpha );\n\t\tWORKSPACE[ 0 ] = NINF;\n\t\tWORKSPACE[ 1 ] = diff + ( ( stat + q ) * stderr );\n\t} else if ( alt === 'greater' ) {\n\t\tpValue = 1.0 - normalCDF( stat );\n\t\tq = normalQuantile( 1.0 - alpha );\n\t\tWORKSPACE[ 0 ] = diff + ( ( stat - q ) * stderr );\n\t\tWORKSPACE[ 1 ] = PINF;\n\t} else { // alt == 'two-sided'\n\t\tpValue = 2.0 * normalCDF( -abs( stat ) );\n\t\tq = normalQuantile( 1.0 - ( alpha / 2.0 ) );\n\t\tWORKSPACE[ 0 ] = diff + ( ( stat - q ) * stderr );\n\t\tWORKSPACE[ 1 ] = diff + ( ( stat + q ) * stderr );\n\t}\n\t// Return test results:\n\tout.rejected = ( pValue <= alpha );\n\tout.alpha = alpha;\n\tout.pValue = f32( pValue );\n\tout.statistic = f32( stat );\n\tout.ci = WORKSPACE;\n\tout.alternative = alt;\n\tout.nullValue = f32( diff );\n\tout.xmean = xmean;\n\tout.ymean = ymean;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sztest2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Z-test for two single-precision floating-point strided arrays.\n*\n* @param {PositiveInteger} NX - number of indexed elements in `x`\n* @param {PositiveInteger} NY - number of indexed elements in `y`\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} diff - difference in means under the null hypothesis\n* @param {PositiveNumber} sigmax - known standard deviation of `x`\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {PositiveNumber} sigmay - known standard deviation of `y`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Results = require( '@stdlib/stats-base-ztest-two-sample-results-float32' );\n*\n* var x = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n* var y = new Float32Array( [ 3.0, 3.0, 5.0, 7.0, 7.0 ] );\n*\n* var results = new Results();\n* var out = sztest2( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 2.0, y, 1, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction sztest2( NX, NY, alternative, alpha, diff, sigmax, x, strideX, sigmay, y, strideY, out ) { // eslint-disable-line max-len, max-params\n\treturn ndarray( NX, NY, alternative, alpha, diff, sigmax, x, strideX, stride2offset( NX, strideX ), sigmay, y, strideY, stride2offset( NY, strideY ), out ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = sztest2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar sztest2 = require( './sztest2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sztest2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sztest2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a two-sample Z-test for two single-precision floating-point strided arrays.\n*\n* @module @stdlib/stats-strided-sztest2\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Results = require( '@stdlib/stats-base-ztest-two-sample-results-float32' );\n* var sztest2 = require( '@stdlib/stats-strided-sztest2' );\n*\n* var x = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n* var y = new Float32Array( [ 3.0, 3.0, 5.0, 7.0, 7.0 ] );\n*\n* var results = new Results();\n* var out = sztest2( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 2.0, y, 1, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Results = require( '@stdlib/stats-base-ztest-two-sample-results-float32' );\n* var sztest2 = require( '@stdlib/stats-strided-sztest2' );\n*\n* var x = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n* var y = new Float32Array( [ 3.0, 3.0, 5.0, 7.0, 7.0 ] );\n*\n* var results = new Results();\n* var out = sztest2.ndarray( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 0, 2.0, y, 1, 0, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar sztest2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsztest2 = main;\n} else {\n\tsztest2 = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sztest2;\n\n// exports: { \"ndarray\": \"sztest2.ndarray\" }\n"],
  "mappings": "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",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "resolveStr", "isnanf", "quantile", "cdf", "smean", "sqrt", "abs", "Float32Array", "PINF", "NINF", "f32", "normalCDF", "normalQuantile", "WORKSPACE", "sztest2", "NX", "NY", "alternative", "alpha", "diff", "sigmax", "strideX", "offsetX", "sigmay", "y", "strideY", "offsetY", "out", "pValue", "stderr", "xmean", "ymean", "xvar", "yvar", "stat", "alt", "q", "require_sztest2", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "sztest2", "NX", "NY", "alternative", "alpha", "diff", "sigmax", "strideX", "sigmay", "y", "strideY", "out", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "sztest2", "ndarray", "join", "tryRequire", "isError", "main", "sztest2", "tmp"]
}
