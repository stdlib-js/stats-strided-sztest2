{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/sztest2.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport resolveStr from '@stdlib/stats-base-ztest-alternative-resolve-str';\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport { factory as quantile } from '@stdlib/stats-base-dists-normal-quantile';\nimport { factory as cdf } from '@stdlib/stats-base-dists-normal-cdf';\nimport { ndarray as smean } from '@stdlib/stats-strided-smean';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport Float32Array from '@stdlib/array-float32';\nimport PINF from '@stdlib/constants-float32-pinf';\nimport NINF from '@stdlib/constants-float32-ninf';\nimport f32 from '@stdlib/number-float64-base-to-float32';\n\n\n// VARIABLES //\n\nvar normalCDF = cdf( 0.0, 1.0 );\nvar normalQuantile = quantile( 0.0, 1.0 );\n\n// Initialize a workspace for storing confidence intervals:\nvar WORKSPACE = new Float32Array( 2 );\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Z-test for two single-precision floating-point strided arrays using alternative indexing semantics.\n*\n* @param {PositiveInteger} NX - number of indexed elements in `x`\n* @param {PositiveInteger} NY - number of indexed elements in `y`\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} diff - difference in means under the null hypothesis\n* @param {PositiveNumber} sigmax - known standard deviation of `x`\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {PositiveNumber} sigmay - known standard deviation of `y`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import Results from '@stdlib/stats-base-ztest-two-sample-results-float32';\n*\n* var x = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n* var y = new Float32Array( [ 3.0, 3.0, 5.0, 7.0, 7.0 ] );\n*\n* var results = new Results();\n* var out = sztest2( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 0, 2.0, y, 1, 0, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction sztest2( NX, NY, alternative, alpha, diff, sigmax, x, strideX, offsetX, sigmay, y, strideY, offsetY, out ) { // eslint-disable-line max-len, max-params\n\tvar pValue;\n\tvar stderr;\n\tvar xmean;\n\tvar ymean;\n\tvar xvar;\n\tvar yvar;\n\tvar stat;\n\tvar alt;\n\tvar q;\n\n\talt = resolveStr( alternative );\n\tif (\n\t\tNX <= 0 ||\n\t\tNY <= 0 ||\n\t\tisnanf( alpha ) ||\n\t\tisnanf( diff ) ||\n\t\tisnanf( sigmax ) ||\n\t\tisnanf( sigmay ) ||\n\t\tsigmax <= 0.0 ||\n\t\tsigmay <= 0.0 ||\n\t\talpha < 0.0 ||\n\t\talpha > 1.0\n\t) {\n\t\tWORKSPACE[ 0 ] = NaN;\n\t\tWORKSPACE[ 1 ] = NaN;\n\t\tout.rejected = false;\n\t\tout.alternative = alt;\n\t\tout.alpha = NaN;\n\t\tout.pValue = NaN;\n\t\tout.statistic = NaN;\n\t\tout.ci = WORKSPACE;\n\t\tout.nullValue = NaN;\n\t\tout.xmean = NaN;\n\t\tout.ymean = NaN;\n\t\treturn out;\n\t}\n\n\t// \"Cast\" input values to single-precision:\n\talpha = f32( alpha );\n\tdiff = f32( diff );\n\tsigmax = f32( sigmax );\n\tsigmay = f32( sigmay );\n\n\t// Compute the standard error of the mean:\n\txvar = sigmax * sigmax;\n\tyvar = sigmay * sigmay;\n\tstderr = sqrt( ( xvar / NX ) + ( yvar / NY ) );\n\n\t// Compute the arithmetic means of the input arrays:\n\txmean = smean( NX, x, strideX, offsetX );\n\tymean = smean( NY, y, strideY, offsetY );\n\n\t// Compute the test statistic (i.e., the z-score, which is the standardized difference between the sample means of x and y, adjusted by the hypothesized difference, in units of the standard error):\n\tstat = ( xmean - ymean - diff ) / stderr;\n\n\t// Compute the p-value and confidence interval...\n\tif ( alt === 'less' ) {\n\t\tpValue = normalCDF( stat );\n\t\tq = normalQuantile( 1.0 - alpha );\n\t\tWORKSPACE[ 0 ] = NINF;\n\t\tWORKSPACE[ 1 ] = diff + ( ( stat + q ) * stderr );\n\t} else if ( alt === 'greater' ) {\n\t\tpValue = 1.0 - normalCDF( stat );\n\t\tq = normalQuantile( 1.0 - alpha );\n\t\tWORKSPACE[ 0 ] = diff + ( ( stat - q ) * stderr );\n\t\tWORKSPACE[ 1 ] = PINF;\n\t} else { // alt == 'two-sided'\n\t\tpValue = 2.0 * normalCDF( -abs( stat ) );\n\t\tq = normalQuantile( 1.0 - ( alpha / 2.0 ) );\n\t\tWORKSPACE[ 0 ] = diff + ( ( stat - q ) * stderr );\n\t\tWORKSPACE[ 1 ] = diff + ( ( stat + q ) * stderr );\n\t}\n\t// Return test results:\n\tout.rejected = ( pValue <= alpha );\n\tout.alpha = alpha;\n\tout.pValue = f32( pValue );\n\tout.statistic = f32( stat );\n\tout.ci = WORKSPACE;\n\tout.alternative = alt;\n\tout.nullValue = f32( diff );\n\tout.xmean = xmean;\n\tout.ymean = ymean;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sztest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Z-test for two single-precision floating-point strided arrays.\n*\n* @param {PositiveInteger} NX - number of indexed elements in `x`\n* @param {PositiveInteger} NY - number of indexed elements in `y`\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} diff - difference in means under the null hypothesis\n* @param {PositiveNumber} sigmax - known standard deviation of `x`\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {PositiveNumber} sigmay - known standard deviation of `y`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import Results from '@stdlib/stats-base-ztest-two-sample-results-float32';\n*\n* var x = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n* var y = new Float32Array( [ 3.0, 3.0, 5.0, 7.0, 7.0 ] );\n*\n* var results = new Results();\n* var out = sztest2( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 2.0, y, 1, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction sztest2( NX, NY, alternative, alpha, diff, sigmax, x, strideX, sigmay, y, strideY, out ) { // eslint-disable-line max-len, max-params\n\treturn ndarray( NX, NY, alternative, alpha, diff, sigmax, x, strideX, stride2offset( NX, strideX ), sigmay, y, strideY, stride2offset( NY, strideY ), out ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sztest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport sztest2 from './sztest2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sztest2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sztest2;\n"],"names":["normalCDF","cdf","normalQuantile","quantile","WORKSPACE","Float32Array","sztest2","NX","NY","alternative","alpha","diff","sigmax","x","strideX","offsetX","sigmay","y","strideY","offsetY","out","pValue","stderr","xmean","ymean","stat","alt","q","resolveStr","isnanf","NaN","rejected","statistic","ci","nullValue","f32","sqrt","smean","NINF","PINF","abs","ndarray","stride2offset","setReadOnly"],"mappings":";;yzCAqCA,IAAIA,EAAYC,EAAK,EAAK,GACtBC,EAAiBC,EAAU,EAAK,GAGhCC,EAAY,IAAIC,EAAc,GAsClC,SAASC,EAASC,EAAIC,EAAIC,EAAaC,EAAOC,EAAMC,EAAQC,EAAGC,EAASC,EAASC,EAAQC,EAAGC,EAASC,EAASC,GAC7G,IAAIC,EACAC,EACAC,EACAC,EAGAC,EACAC,EACAC,EAGJ,OADAD,EAAME,EAAYnB,GAEjBF,GAAM,GACNC,GAAM,GACNqB,EAAQnB,IACRmB,EAAQlB,IACRkB,EAAQjB,IACRiB,EAAQb,IACRJ,GAAU,GACVI,GAAU,GACVN,EAAQ,GACRA,EAAQ,GAERN,EAAW,GAAM0B,IACjB1B,EAAW,GAAM0B,IACjBV,EAAIW,UAAW,EACfX,EAAIX,YAAciB,EAClBN,EAAIV,MAAQoB,IACZV,EAAIC,OAASS,IACbV,EAAIY,UAAYF,IAChBV,EAAIa,GAAK7B,EACTgB,EAAIc,UAAYJ,IAChBV,EAAIG,MAAQO,IACZV,EAAII,MAAQM,IACLV,IAIRV,EAAQyB,EAAKzB,GACbC,EAAOwB,EAAKxB,GACZC,EAASuB,EAAKvB,GACdI,EAASmB,EAAKnB,GAKdM,EAASc,EAFFxB,EAASA,EAEQL,EADjBS,EAASA,EACwBR,GAOxCiB,IAJAF,EAAQc,EAAO9B,EAAIM,EAAGC,EAASC,KAC/BS,EAAQa,EAAO7B,EAAIS,EAAGC,EAASC,IAGNR,GAASW,EAGrB,SAARI,GACJL,EAASrB,EAAWyB,GACpBE,EAAIzB,EAAgB,EAAMQ,GAC1BN,EAAW,GAAMkC,EACjBlC,EAAW,GAAMO,GAAWc,EAAOE,GAAML,GACtB,YAARI,GACXL,EAAS,EAAMrB,EAAWyB,GAC1BE,EAAIzB,EAAgB,EAAMQ,GAC1BN,EAAW,GAAMO,GAAWc,EAAOE,GAAML,EACzClB,EAAW,GAAMmC,IAEjBlB,EAAS,EAAMrB,GAAYwC,EAAKf,IAChCE,EAAIzB,EAAgB,EAAQQ,EAAQ,GACpCN,EAAW,GAAMO,GAAWc,EAAOE,GAAML,EACzClB,EAAW,GAAMO,GAAWc,EAAOE,GAAML,GAG1CF,EAAIW,SAAaV,GAAUX,EAC3BU,EAAIV,MAAQA,EACZU,EAAIC,OAASc,EAAKd,GAClBD,EAAIY,UAAYG,EAAKV,GACrBL,EAAIa,GAAK7B,EACTgB,EAAIX,YAAciB,EAClBN,EAAIc,UAAYC,EAAKxB,GACrBS,EAAIG,MAAQA,EACZH,EAAII,MAAQA,EACLJ,EACR,CCxGA,SAASd,EAASC,EAAIC,EAAIC,EAAaC,EAAOC,EAAMC,EAAQC,EAAGC,EAASE,EAAQC,EAAGC,EAASE,GAC3F,OAAOqB,EAASlC,EAAIC,EAAIC,EAAaC,EAAOC,EAAMC,EAAQC,EAAGC,EAAS4B,EAAenC,EAAIO,GAAWE,EAAQC,EAAGC,EAASwB,EAAelC,EAAIU,GAAWE,EACvJ,CChCAuB,EAAArC,EAAA,UAAAmC"}